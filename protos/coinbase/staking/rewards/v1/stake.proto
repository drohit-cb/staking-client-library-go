syntax = "proto3";

package coinbase.staking.rewards.v1;

import "coinbase/staking/rewards/v1/common.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/coinbase/staking-client-library-go/gen/go/coinbase/staking/rewards/v1";

// The representation of a staking activity at a particular point in time.
// (-- api-linter: core::0123::resource-name-field=disabled
//     aip.dev/not-precedent: Not including a 'name' field till our data sources support a unique identifier --)
message Stake {
  option (google.api.resource) = {
    type: "coinbase.staking.rewards/Stake"
    pattern: "protocols/{protocol}/stakes/{stake}"
    singular: "stake"
    plural: "stakes"
  };

  // The unique identifier for this staking balance. This is intended to be added in the future when GetStakes is implemented
  // but as of now, we only support ListStakes and therefore don't need a unique identifier. It's been marked as reserved to ensure
  // that the spot is available when we do implement GetStakes. This ensures that a field such as "id" is assigned a value
  // within the first 15 spots, which takes just one byte to encode instead of two. This is a slight performance optimization.
  reserved "id";
  reserved 1;

  // The address of the staking balance.
  string address = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The time at which this balance was evaluated.
  // Timestamps are in UTC, conforming to the RFC-3339 spec (e.g. 2023-11-13T19:38:36Z).
  google.protobuf.Timestamp evaluation_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The total amount of stake that is actively earning rewards to this address.
  // Includes any delegated stake and self-stake.
  // For delegators, this would be only the amount delegated to a validator in most cases.
  // Only includes stake that is *actively contributing to rewards and can't be reduced
  // without affecting the rewards dynamics*.
  //
  // Pending inactive stake is included.
  // Pending active stake is not included.
  AssetAmount bonded_stake = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The amount of stake that this address receives from other addresses.
  // For most delegators, this will be 0.
  AssetAmount total_delegation_received = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The list of individual delegations this address has received from other addresses
  optional Delegation delegations_received = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The amount that this address stakes to another address.
  optional Delegation delegations_given = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // A single delegation from one address to another.
  message Delegation {
    // Address associated to the delegation
    string address = 1;
    // Amount of delegation received or given
    AssetAmount amount = 2;
    // Commission rate for delegation
    string commission_rate = 3;
  }

  // If this staking-related address is active at evaluation_time. Can help inform the user if their staking-related address
  // is active or not, such as in the case of DOT where an address can be staking but not in the active set.
  // active(8) has been temporarily reserved because it's not something we want to implement for quite some time.
  reserved "active";
  reserved 8;

  // An estimated yield of this address.
  repeated RewardRate reward_rate_calculations = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The participant type at the time of evaluation (i.e. validator, delegator).
  ParticipantType participant_type = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Any pending rewards to this address. We consider pending rewards those rewards which
  // haven't been "earned" yet.
  // pending_rewards(11) has been reserved until we reach consensus on the definition of pending rewards.
  reserved "pending_rewards";
  reserved 11;

  // The protocol on which this staking balance exists.
  string protocol = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The amount of stake that is not actively earning rewards to this address.
  // This amount includes any native token balance that is under the domain and control of the address in question,
  // but is not actively staked.
  //
  // Pending active stake would be included here.
  AssetAmount unbonded_balance = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Reward yield calculation at a given point in time.
message RewardRate {
  // The percentage rate of rewards calculation. Will include two digits after the decimal (ex: 3.05).
  string percentage = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The time at which this yield calculation was calculated.
  // Timestamps are in UTC, conforming to the RFC-3339 spec (e.g. 2023-11-13T19:38:36Z).
  google.protobuf.Timestamp calculated_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The method used to calculate this yield. This could include information about which
  // rewards we're including in the calculation, how we're estimating the compounding period, etc.
  CalculationMethods calculation_method = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Representing the different methods of calculating yield.
  enum CalculationMethods {
    // Calculation method is unknown or unspecified.
    CALCULATION_METHODS_UNSPECIFIED = 0;
    // A single Ethereum validator acting in isolation is currently not able to compound earned rewards because
    // Ethereum only allows validators to stake 32 ETH precisely.
    // This percentage yield is assuming that the rewards never compound, mimicking the behavior of a solo staker.
    SOLO_STAKER = 1;
    // A pool of Ethereum validators of sufficient size is able to compound rewards almost immediately.
    // This percentage yield is assuming rewards compound immediately, mimicking the behavior of a sufficiently large pool.
    POOLED_STAKER = 2;
    // A Solana delegator's staking rewards are staked (and therefore auto-compound) when rewards are paid out between epochs.
    // This percentage yield is assuming the rewards are auto-compounded on that schedule, mimicking a Solana delegator.
    EPOCH_AUTO_COMPOUNDING = 3;
    // A Solana validator's rewards accumulate in a separate account from the validator's active stake.
    // This percentage yield is assuming the rewards are not auto-compounded at any point, mimicking a Solana validator who never staked their rewards.
    NO_AUTO_COMPOUNDING = 4;
  }
}

// The request message for ListStakes.
message ListStakesRequest {
  // The protocol that the staking balance exists on.
  // The response will only include staking balances for the protocol specified here.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "coinbase.staking.rewards/Protocol"
  ];

  //  The maximum number of items to return.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // A page token as part of the response of a previous call.
  // Provide this to retrieve the next page.
  //
  // When paginating, all other parameters must match the previous
  // request to list resources.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // [AIP-160](https://google.aip.dev/160) format compliant filter. Supported protocols are 'ethereum', 'solana'.
  // Supplying other protocols will return an error.
  // * **Ethereum**:
  //   - Fields:
  //   - `address` - A ethereum validator public key.
  //   - `evaluation_time` - A timestamp in RFC-3339 format. Supports multiple comparisons (ex: '2024-01-01T00:00:00Z' and '2024-01-15T00:00:00Z').
  //   - Example(s):
  //   - `"address='0xac53512c39d0081ca4437c285305eb423f474e6153693c12fbba4a3df78bcaa3422b31d800c5bea71c1b017168a60474'"`
  //   - `"address='0xac53512c39d0081ca4437c285305eb423f474e6153693c12fbba4a3df78bcaa3422b31d800c5bea71c1b017168a60474' AND evaluation_time >= '2024-01-01T00:00:00Z' AND evaluation_time < '2024-01-15T00:00:00Z'"`
  //
  // * **Solana**:
  //   - Fields:
  //   - `address` - A solana staking address.
  //   - `evaluation_time` - A timestamp in RFC-3339 format. Supports multiple comparisons (ex: '2024-01-01T00:00:00Z' and '2024-01-15T00:00:00Z').
  //   - Example(s):
  //   - `"address='beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar'"`
  //   - `"address='beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar' AND evaluation_time >= '2024-01-01T00:00:00Z' AND evaluation_time < '2024-01-15T00:00:00Z'"`
  string filter = 4 [(google.api.field_behavior) = OPTIONAL];
}

// The response message for ListStakes.
message ListStakesResponse {
  // The staking balances returned in this response.
  repeated Stake stakes = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The page token the user must use in the next request if the next page is desired.
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The participant type of a staking-related address.
enum ParticipantType {
  // The participant type is unknown.
  PARTICIPANT_TYPE_UNSPECIFIED = 0;

  // Used when the onchain participant type is a delegator
  // (i.e. someone who delegates the responsibilities of validating blocks to another address in return for a share of the rewards).
  DELEGATOR = 1;

  // Used when the onchain participant type is a validator
  // (i.e. an address that is directly responsible for performing validation of blocks).
  VALIDATOR = 2;
}
