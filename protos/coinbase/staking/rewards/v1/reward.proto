syntax = "proto3";

package coinbase.staking.rewards.v1;

import "coinbase/staking/rewards/v1/common.proto";
import "coinbase/staking/rewards/v1/stake.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/coinbase/staking-client-library-go/gen/go/coinbase/staking/rewards/v1";

// Rewards earned within a particular period of time.
// (-- api-linter: core::0123::resource-name-field=disabled
//     aip.dev/not-precedent: Not including a 'name' field till our data sources support a unique identifier --)
message Reward {
  option (google.api.resource) = {
    type: "coinbase.staking.rewards/Reward"
    pattern: "protocols/{protocol}/rewards/{reward}"
    singular: "reward"
    plural: "rewards"
  };

  // The address that earned this reward.
  string address = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  reserved 3;
  reserved "period";

  // The period identifier of this reward aggregation. ex: epoch number, date.
  oneof period_identifier {
    // A unique identifier for the consensus-cycle of the blockchain.
    int64 epoch = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
    // The date of the reward in format 'YYYY-MM-DD' in UTC.
    // (-- api-linter: core::0142::time-field-type=disabled False positive. This isn't a timestamp, but a YYYY-MM-DD field --)
    string date = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // The unit of time that the reward events were rolled up by.
  // Can be either "epoch" or "daily".
  AggregationUnit aggregation_unit = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The starting time of this reward period. Returned when querying by epoch.
  // Timestamps are in UTC, conforming to the RFC-3339 spec (e.g. 2024-11-13T19:38:36Z).
  // Field currently unavailable. Coming soon.
  google.protobuf.Timestamp period_start_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The ending time of this reward period. Returned when querying by epoch.
  // Timestamps are in UTC, conforming to the RFC-3339 spec (e.g. 2024-11-13T19:38:36Z).
  google.protobuf.Timestamp period_end_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The amount earned in this time period in the native unit of the protocol.
  AssetAmount total_earned_native_unit = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The amount earned in this time period in USD. Calculated by getting each individual reward of this
  // time period and summing the USD value of each individual component. USD value is calculate at
  // the time each component was earned.
  repeated USDValue total_earned_usd = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // A snapshot of the staking balance the end of this period.
  // Field currently unavailable. Coming soon.
  Stake ending_balance = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The protocol on which this reward was earned.
  string protocol = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Information regarding the USD value of a reward, with necessary context and metadata.
message USDValue {
  // The source of the USD price conversion. Could be internal to Coinbase, and external source, or any other source.
  Source source = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The source of the USD price conversion.
  enum Source {
    // The USD value source is unknown or unspecified.
    SOURCE_UNSPECIFIED = 0;
    // The USD value source is the Coinbase exchange.
    COINBASE_EXCHANGE = 1;
  }

  // The timestamp at which the USD value was sourced to convert the value into USD.
  // This value is as close to the time the reward was earned as possible.
  // Timestamps are in UTC, conforming to the RFC-3339 spec (e.g. 2024-11-13T19:38:36Z).
  google.protobuf.Timestamp conversion_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The USD value of the reward at the conversion time.
  AssetAmount amount = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The price of the native unit at the conversion time.
  string conversion_price = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The request message for ListRewards.
message ListRewardsRequest {
  // The protocol that the rewards were earned on.
  // The response will only include rewards for the protocol specified here.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "coinbase.staking.rewards/Protocol"
  ];

  // The maximum number of items to return. Maximum size of this value is 500.
  // If user supplies a value > 500, the API will truncate to 500.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // A page token as part of the response of a previous call.
  // Provide this to retrieve the next page.
  //
  // When paginating, all other parameters must match the previous
  // request to list resources correctly.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // [AIP-160](https://google.aip.dev/160) format compliant filter. Supported protocols are 'ethereum', 'solana', and 'cosmos'.
  // Supplying other protocols will return an error.
  // * **Ethereum**:
  //   - Fields:
  //   - `address` - A ethereum validator public key.
  //   - `date` - A date in format 'YYYY-MM-DD'. Supports multiple comparisons (ex: '2024-01-15).
  //   - `period_end_time` - A timestamp in RFC-3339 format. Supports multiple comparisons (ex: '2024-01-01T00:00:00Z' and '2024-01-15T00:00:00Z').
  //   - Example(s):
  //   - `"address='0xac53512c39d0081ca4437c285305eb423f474e6153693c12fbba4a3df78bcaa3422b31d800c5bea71c1b017168a60474' AND date >= '2024-01-01' AND date < '2024-01-15'"`
  //   - `"address='0xac53512c39d0081ca4437c285305eb423f474e6153693c12fbba4a3df78bcaa3422b31d800c5bea71c1b017168a60474' AND period_end_time >= '2024-01-01T00:00:00Z' AND period_end_time < '2024-01-15T00:00:00Z'"`
  //   - `"address='0xac53512c39d0081ca4437c285305eb423f474e6153693c12fbba4a3df78bcaa3422b31d800c5bea71c1b017168a60474' AND date = '2024-01-01'"`
  //
  // * **Solana**:
  //   - Fields:
  //   - `address` - A solana validator or delegator address.
  //   - `epoch` - A solana epoch. Supports epoch comparisons (ex: `epoch >= 1000 AND epoch <= 2000`).
  //   - `period_end_time` - A timestamp in RFC-3339 format. Supports multiple comparisons (ex: '2024-01-01T00:00:00Z' and '2024-01-15T00:00:00Z').
  //   - Example(s):
  //   - `"address='beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar' AND epoch >= 540 AND epoch < 550"`
  //   - `"address='beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar' AND period_end_time >= '2024-01-01T00:00:00Z' AND period_end_time < '2024-01-15T00:00:00Z'"`
  //   - `"address='beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar' AND epoch = 550"`
  //
  // * **Cosmos**:
  //   - Fields:
  //   - `address` - A cosmos validator or delegator address (ex: `cosmosvaloper1c4k24jzduc365kywrsvf5ujz4ya6mwympnc4en` and `cosmos1c4k24jzduc365kywrsvf5ujz4ya6mwymy8vq4q`)
  //   - `date` - A date in format 'YYYY-MM-DD'. Supports multiple comparisons (ex: '2024-01-15).
  //   - `period_end_time` - A timestamp in RFC-3339 format. Supports multiple comparisons (ex: '2024-01-01T00:00:00Z' and '2024-01-15T00:00:00Z').
  //   - Example(s):
  //   - `"address='cosmos1mfduj0qax6ut8rd6cfc4j0ds06z0mwlhrljhqh' AND date = '2024-11-16'"`
  //   - `"address='cosmos1mfduj0qax6ut8rd6cfc4j0ds06z0mwlhrljhqh' AND period_end_time >= '2024-01-01T00:00:00Z' AND period_end_time < '2024-01-15T00:00:00Z'"`
  //   - `"address='cosmos1mfduj0qax6ut8rd6cfc4j0ds06z0mwlhrljhqh' AND date = '2024-01-01'"`
  string filter = 4 [(google.api.field_behavior) = OPTIONAL];
}

// The response message for ListRewards.
message ListRewardsResponse {
  // The rewards returned in this response.
  repeated Reward rewards = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The page token the user must use in the next request if the next page is desired.
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The unit of time that the reward events were aggregated by.
enum AggregationUnit {
  // Aggregation unit is unknown or unspecified.
  AGGREGATION_UNIT_UNSPECIFIED = 0;
  // Indicates the rewards are aggregated by epoch. This means there will be a 'epoch' field displaying the epoch on this resource.
  EPOCH = 1;
  // Indicates the rewards are aggregated by day. This means there will be a 'date' field displaying the date on this resource.
  DAY = 2;
}
