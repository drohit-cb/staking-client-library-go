syntax = "proto3";

package coinbase.staking.orchestration.v1;

option go_package = "github.com/coinbase/staking-client-library-go/gen/go/coinbase/staking/orchestration/v1";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "coinbase/staking/orchestration/v1/protocol.proto";
import "coinbase/staking/orchestration/v1/network.proto";
import "coinbase/staking/orchestration/v1/action.proto";
import "coinbase/staking/orchestration/v1/staking_target.proto";
import "coinbase/staking/orchestration/v1/workflow.proto";
import "coinbase/staking/orchestration/v1/staking_context.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "api.developer.coinbase.com";
  base_path: "/staking";
  schemes: HTTPS
  consumes: "application/json";
  produces: "application/json";
  info: {
    title: "Orchestration Service";
    description: "Service that can power non-custodial staking experiences for your users.";
    version: "v1";
  };
  responses: {
    key: "400";
    value: {
      description: "The request attempted has invalid parameters";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        };
      };
    };
  };
  responses: {
    key: "401";
    value: {
      description: "Returned if authentication information is invalid";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        };
      };
    };
  };
  responses: {
    key: "403";
    value: {
      description: "Returned when a user does not have permission to the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        };
      };
    };
  };
  responses: {
    key: "404";
    value: {
      description: "Returned when a resource is not found.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        };
      };
    };
  };
  responses: {
    key: "429";
    value: {
      description: "Returned when a resource limit has been reached.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        };
      };
    };
  };
  responses: {
    key: "500";
    value: {
      description: "Returned when an internal server error happens.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        };
      };
    };
  };
  tags: [
    {
      name: "Protocol";
      description: "Protocols details";
    },
    {
      name: "Network";
      description: "Networks details";
    },
    {
      name: "Action";
      description: "Actions details";
    },
    {
      name: "StakingTarget";
      description: "Staking targets details";
    },
    {
      name: "StakingContext";
      description: "Staking context details";
    },
    {
      name: "Workflow";
      description: "Workflow management details";
    }
  ];
};

// StakingService manages staking related resources such as protocols, networks, validators and workflows.
service StakingService {
  option (google.api.default_host) = "api.developer.coinbase.com";

  // List supported protocols.
  rpc ListProtocols(ListProtocolsRequest) returns (ListProtocolsResponse) {
    option (google.api.http) = {
      get: "/v1/protocols"
    };

    option (google.api.method_signature) = "";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported protocols";
      description: "List supported protocols";
      operation_id: "listProtocols";
      tags: "Protocol";
      responses: {
        key: "200"
          value: {
          description: "OK";
        }
      }
    };

  };

  // List supported staking networks for a given protocol.
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=protocols/*}/networks"
    };

    option (google.api.method_signature) = "parent";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported networks";
      description: "List supported networks";
      operation_id: "listNetworks";
      tags: "Network";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // List supported staking targets for a given protocol and network.
  rpc ListStakingTargets(ListStakingTargetsRequest) returns (ListStakingTargetsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=protocols/*/networks/*}/stakingTargets"
    };

    option (google.api.method_signature) = "parent";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported staking targets";
      description: "List supported staking targets";
      operation_id: "listStakingTargets";
      tags: "StakingTarget";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // List supported actions for a given protocol and network.
  rpc ListActions(ListActionsRequest) returns (ListActionsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=protocols/*/networks/*}/actions"
    };

    option (google.api.method_signature) = "parent";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported actions";
      description: "List supported actions";
      operation_id: "listActions";
      tags: "Action";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // Create a workflow to perform an action.
  rpc CreateWorkflow(CreateWorkflowRequest) returns (Workflow) {
    option (google.api.method_signature) = "parent,workflow";

    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/workflows"
      body: "workflow"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create workflow";
      operation_id: "createWorkflow";
      tags: "Workflow";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // Get the current state of an active workflow.
  rpc GetWorkflow(GetWorkflowRequest) returns (Workflow) {
    option (google.api.http) = {
      get: "/v1/{name=projects/*/workflows/*}"
    };

    option (google.api.method_signature) = "name";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get workflow";
      operation_id: "getWorkflow";
      tags: "Workflow";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // List all workflows in a project.
  rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=projects/*}/workflows"
    };

    option (google.api.method_signature) = "parent";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported workflows";
      operation_id: "listWorkflows";
      tags: "Workflow";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // Perform the next step in a workflow.
  rpc PerformWorkflowStep(PerformWorkflowStepRequest) returns (Workflow) {
    option (google.api.http) = {
      post: "/v1/{name=projects/*/workflows/*}/step"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Perform the next step in a workflow";
      description: "Perform the next step in a workflow";
      operation_id: "updateWorkflow";
      tags: "Workflow";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // View Staking context information given a specific network address.
  rpc ViewStakingContext(ViewStakingContextRequest) returns (ViewStakingContextResponse) {
    option (google.api.http) = {
      get: "/v1/viewStakingContext:view"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Returns point-in-time context of staking data for an address";
      description: "Returns point-in-time context of staking data for an address";
      operation_id: "ViewStakingContext";
      tags: "StakingContext";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };
  };
}
