syntax = "proto3";

package coinbase.staking.orchestration.v1;

option go_package = "github.com/coinbase/staking-client-library-go/gen/go/coinbase/staking/orchestration/v1";

import "google/api/field_behavior.proto";
import "google/api/resource.proto";

// A Validator resource represents an active validator for the given protocol network.
message Validator {
  option (google.api.resource) = {
    type: "staking.coinbase.com/Validator"
    pattern: "protocols/{protocol}/networks/{network}/stakingTargets/{validator}"
    singular: "validator"
    plural: "validators"
  };

  // The resource name of the Validator.
  // Format: protocols/{protocolName}/networks/{networkName}/stakingTargets/{validatorName}
  // Ex: protocols/solana/networks/testnet/stakingTargets/GkqYQysEGmuL6V2AJoNnWZUz2ZBGWhzQXsJiXm2CLKAN
  string name = 1;

  // The public address of the validator.
  string address = 2;

  // The rate of commission for the validator
  float commission_rate = 3;
}

// A Contract resource, which represents an active contract
// for the given protocol network which you can submit an action
// to.
message Contract {
  option (google.api.resource) = {
    type: "staking.coinbase.com/Contract"
    pattern: "protocols/{protocol}/networks/{network}/stakingTargets/{contract}"
    singular: "contract"
    plural: "contracts"
  };

  // The resource name of the Contract Address.
  // Format: protocols/{protocolName}/networks/{networkName}/stakingTargets/{contractName}
  // Ex: protocols/ethereum_kiln/networks/holesky/stakingTargets/0xA55416de5DE61A0AC1aa8970a280E04388B1dE4b
  string name = 1;

  // The contract address you may submit actions to.
  string address = 2;
}

// A Staking Target represents a destination that you perform an action on related to staking.
message StakingTarget {

  oneof staking_targets {
    // A validator to stake to.
    Validator validator = 1;

    // A contract to send a staking action to.
    Contract contract = 2;
  }
}

// The request message for ListStakingTargets.
message ListStakingTargetsRequest {
  // The resource name of the parent that owns
  // the collection of staking targets.
  // Format: protocols/{protocol}/networks/{network}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "staking.coinbase.com/StakingTarget"
    }];

    // The maximum number of staking targets to return. The service may
    // return fewer than this value.
    //
    // If unspecified, 100 staking targets will be returned.
    // The maximum value is 1000; values over 1000 will be floored to 1000.
    int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

    // A page token as part of the response of a previous call.
    // Provide this to retrieve the next page.
    //
    // When paginating, all other parameters must match the previous
    // request to list resources.
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The response message for ListStakingTargets.
message ListStakingTargetsResponse {
  // The list of staking targets.
  repeated StakingTarget staking_targets = 1;

  // A token which can be provided as `page_token` to retrieve the next page.
  // If this field is omitted, there are no additional pages.
  string next_page_token = 2;
}
