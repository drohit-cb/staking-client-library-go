// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: coinbase/staking/v1alpha1/solana.proto

package v1alpha1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The parameters required to use a durable transaction nonce for Solana transactions.
type NonceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The blockhash stored in the nonce account.
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The address of the nonce account.
	NonceAccount string `protobuf:"bytes,2,opt,name=nonce_account,json=nonceAccount,proto3" json:"nonce_account,omitempty"`
	// The address of the nonce authority. If not provided, defaults to the nonce_account_address. Signs the transaction.
	NonceAuthority string `protobuf:"bytes,3,opt,name=nonce_authority,json=nonceAuthority,proto3" json:"nonce_authority,omitempty"`
}

func (x *NonceOptions) Reset() {
	*x = NonceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceOptions) ProtoMessage() {}

func (x *NonceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceOptions.ProtoReflect.Descriptor instead.
func (*NonceOptions) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_solana_proto_rawDescGZIP(), []int{0}
}

func (x *NonceOptions) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *NonceOptions) GetNonceAccount() string {
	if x != nil {
		return x.NonceAccount
	}
	return ""
}

func (x *NonceOptions) GetNonceAuthority() string {
	if x != nil {
		return x.NonceAuthority
	}
	return ""
}

// The parameters required for the create stake account action on Solana.
type SolanaCreateStakeAccountParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the new stake account which will be created. This address must not already exist. Signs the transaction.
	StakeAccountAddress string `protobuf:"bytes,1,opt,name=stake_account_address,json=stakeAccountAddress,proto3" json:"stake_account_address,omitempty"`
	// The address of the account which will fund the stake account. Pays the transaction fee. Signs the transaction.
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// The address of the account which will be granted signing authority over staking operations on the new stake account. If not provided, defaults to the from_address.
	StakeAuthority string `protobuf:"bytes,3,opt,name=stake_authority,json=stakeAuthority,proto3" json:"stake_authority,omitempty"`
	// The address of the account which will be granted signing authority over withdrawing inactive stake from the new stake account. If not provided, defaults to the from_address.
	WithdrawAuthority string `protobuf:"bytes,4,opt,name=withdraw_authority,json=withdrawAuthority,proto3" json:"withdraw_authority,omitempty"`
	// The amount to fund the stake account with, in Lamports.
	Amount *Amount `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The parameters required to use a durable transaction nonce for Solana transactions.
	NonceOptions *NonceOptions `protobuf:"bytes,6,opt,name=nonce_options,json=nonceOptions,proto3" json:"nonce_options,omitempty"`
}

func (x *SolanaCreateStakeAccountParameters) Reset() {
	*x = SolanaCreateStakeAccountParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaCreateStakeAccountParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaCreateStakeAccountParameters) ProtoMessage() {}

func (x *SolanaCreateStakeAccountParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaCreateStakeAccountParameters.ProtoReflect.Descriptor instead.
func (*SolanaCreateStakeAccountParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_solana_proto_rawDescGZIP(), []int{1}
}

func (x *SolanaCreateStakeAccountParameters) GetStakeAccountAddress() string {
	if x != nil {
		return x.StakeAccountAddress
	}
	return ""
}

func (x *SolanaCreateStakeAccountParameters) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *SolanaCreateStakeAccountParameters) GetStakeAuthority() string {
	if x != nil {
		return x.StakeAuthority
	}
	return ""
}

func (x *SolanaCreateStakeAccountParameters) GetWithdrawAuthority() string {
	if x != nil {
		return x.WithdrawAuthority
	}
	return ""
}

func (x *SolanaCreateStakeAccountParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SolanaCreateStakeAccountParameters) GetNonceOptions() *NonceOptions {
	if x != nil {
		return x.NonceOptions
	}
	return nil
}

// The parameters required for the delegate stake action on Solana.
type SolanaDelegateStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the stake account which will be delegating its stake.
	StakeAccountAddress string `protobuf:"bytes,1,opt,name=stake_account_address,json=stakeAccountAddress,proto3" json:"stake_account_address,omitempty"`
	// The address of the validator's vote account to which the stake will be delegated.
	VoteAccountAddress string `protobuf:"bytes,2,opt,name=vote_account_address,json=voteAccountAddress,proto3" json:"vote_account_address,omitempty"`
	// The address of the account which has signing authority over staking operations on the stake account. Signs the transaction.
	StakeAuthority string `protobuf:"bytes,3,opt,name=stake_authority,json=stakeAuthority,proto3" json:"stake_authority,omitempty"`
	// The parameters required to use a durable transaction nonce for Solana transactions.
	NonceOptions *NonceOptions `protobuf:"bytes,4,opt,name=nonce_options,json=nonceOptions,proto3" json:"nonce_options,omitempty"`
}

func (x *SolanaDelegateStakeParameters) Reset() {
	*x = SolanaDelegateStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaDelegateStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaDelegateStakeParameters) ProtoMessage() {}

func (x *SolanaDelegateStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaDelegateStakeParameters.ProtoReflect.Descriptor instead.
func (*SolanaDelegateStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_solana_proto_rawDescGZIP(), []int{2}
}

func (x *SolanaDelegateStakeParameters) GetStakeAccountAddress() string {
	if x != nil {
		return x.StakeAccountAddress
	}
	return ""
}

func (x *SolanaDelegateStakeParameters) GetVoteAccountAddress() string {
	if x != nil {
		return x.VoteAccountAddress
	}
	return ""
}

func (x *SolanaDelegateStakeParameters) GetStakeAuthority() string {
	if x != nil {
		return x.StakeAuthority
	}
	return ""
}

func (x *SolanaDelegateStakeParameters) GetNonceOptions() *NonceOptions {
	if x != nil {
		return x.NonceOptions
	}
	return nil
}

// The parameters required for the deactivate stake action on Solana.
type SolanaDeactivateStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the stake account which will have its stake deactivated. Stake must be currently active.
	StakeAccountAddress string `protobuf:"bytes,1,opt,name=stake_account_address,json=stakeAccountAddress,proto3" json:"stake_account_address,omitempty"`
	// The address of the account which has signing authority over staking operations on the stake account. Signs the transaction.
	StakeAuthority string `protobuf:"bytes,2,opt,name=stake_authority,json=stakeAuthority,proto3" json:"stake_authority,omitempty"`
	// The parameters required to use a durable transaction nonce for Solana transactions.
	NonceOptions *NonceOptions `protobuf:"bytes,3,opt,name=nonce_options,json=nonceOptions,proto3" json:"nonce_options,omitempty"`
}

func (x *SolanaDeactivateStakeParameters) Reset() {
	*x = SolanaDeactivateStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaDeactivateStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaDeactivateStakeParameters) ProtoMessage() {}

func (x *SolanaDeactivateStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaDeactivateStakeParameters.ProtoReflect.Descriptor instead.
func (*SolanaDeactivateStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_solana_proto_rawDescGZIP(), []int{3}
}

func (x *SolanaDeactivateStakeParameters) GetStakeAccountAddress() string {
	if x != nil {
		return x.StakeAccountAddress
	}
	return ""
}

func (x *SolanaDeactivateStakeParameters) GetStakeAuthority() string {
	if x != nil {
		return x.StakeAuthority
	}
	return ""
}

func (x *SolanaDeactivateStakeParameters) GetNonceOptions() *NonceOptions {
	if x != nil {
		return x.NonceOptions
	}
	return nil
}

// The parameters required for the withdraw stake action on Solana.
type SolanaWithdrawStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the stake account from which stake will be withdrawn. Stake must be currently inactive.
	StakeAccountAddress string `protobuf:"bytes,1,opt,name=stake_account_address,json=stakeAccountAddress,proto3" json:"stake_account_address,omitempty"`
	// The address of the recipient account which will receive the withdrawn stake.
	RecipientAddress string `protobuf:"bytes,2,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	// The address of the account which has signing authority over withdrawing inactive stake from the stake account. Signs the transaction.
	WithdrawAuthority string `protobuf:"bytes,3,opt,name=withdraw_authority,json=withdrawAuthority,proto3" json:"withdraw_authority,omitempty"`
	// The amount to withdraw from the stake account, in Lamports.
	Amount *Amount `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The parameters required to use a durable transaction nonce for Solana transactions.
	NonceOptions *NonceOptions `protobuf:"bytes,5,opt,name=nonce_options,json=nonceOptions,proto3" json:"nonce_options,omitempty"`
}

func (x *SolanaWithdrawStakeParameters) Reset() {
	*x = SolanaWithdrawStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaWithdrawStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaWithdrawStakeParameters) ProtoMessage() {}

func (x *SolanaWithdrawStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaWithdrawStakeParameters.ProtoReflect.Descriptor instead.
func (*SolanaWithdrawStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_solana_proto_rawDescGZIP(), []int{4}
}

func (x *SolanaWithdrawStakeParameters) GetStakeAccountAddress() string {
	if x != nil {
		return x.StakeAccountAddress
	}
	return ""
}

func (x *SolanaWithdrawStakeParameters) GetRecipientAddress() string {
	if x != nil {
		return x.RecipientAddress
	}
	return ""
}

func (x *SolanaWithdrawStakeParameters) GetWithdrawAuthority() string {
	if x != nil {
		return x.WithdrawAuthority
	}
	return ""
}

func (x *SolanaWithdrawStakeParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SolanaWithdrawStakeParameters) GetNonceOptions() *NonceOptions {
	if x != nil {
		return x.NonceOptions
	}
	return nil
}

// The parameters required for split stake action on Solana.
type SolanaSplitStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the stake account will be split and have its stake removed.
	StakeAccountAddress string `protobuf:"bytes,1,opt,name=stake_account_address,json=stakeAccountAddress,proto3" json:"stake_account_address,omitempty"`
	// The address of the new stake account which will be created and have the stake added to it.
	NewStakeAccountAddress string `protobuf:"bytes,2,opt,name=new_stake_account_address,json=newStakeAccountAddress,proto3" json:"new_stake_account_address,omitempty"`
	// The address of the account which has signing authority over staking operations on the stake account. Signs the transaction.
	StakeAuthority string `protobuf:"bytes,3,opt,name=stake_authority,json=stakeAuthority,proto3" json:"stake_authority,omitempty"`
	// The amount of stake to split, in Lamports.
	Amount *Amount `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The parameters required to use a durable transaction nonce for Solana transactions.
	NonceOptions *NonceOptions `protobuf:"bytes,5,opt,name=nonce_options,json=nonceOptions,proto3" json:"nonce_options,omitempty"`
}

func (x *SolanaSplitStakeParameters) Reset() {
	*x = SolanaSplitStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSplitStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSplitStakeParameters) ProtoMessage() {}

func (x *SolanaSplitStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSplitStakeParameters.ProtoReflect.Descriptor instead.
func (*SolanaSplitStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_solana_proto_rawDescGZIP(), []int{5}
}

func (x *SolanaSplitStakeParameters) GetStakeAccountAddress() string {
	if x != nil {
		return x.StakeAccountAddress
	}
	return ""
}

func (x *SolanaSplitStakeParameters) GetNewStakeAccountAddress() string {
	if x != nil {
		return x.NewStakeAccountAddress
	}
	return ""
}

func (x *SolanaSplitStakeParameters) GetStakeAuthority() string {
	if x != nil {
		return x.StakeAuthority
	}
	return ""
}

func (x *SolanaSplitStakeParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SolanaSplitStakeParameters) GetNonceOptions() *NonceOptions {
	if x != nil {
		return x.NonceOptions
	}
	return nil
}

// The parameters required for merge stake action on Solana.
type SolanaMergeStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the stake account will be merged into and have stake added to it.
	StakeAccountAddress string `protobuf:"bytes,1,opt,name=stake_account_address,json=stakeAccountAddress,proto3" json:"stake_account_address,omitempty"`
	// The address of the source stake account which will have no longer exist after the merge.
	SourceStakeAccountAddress string `protobuf:"bytes,2,opt,name=source_stake_account_address,json=sourceStakeAccountAddress,proto3" json:"source_stake_account_address,omitempty"`
	// The address of the account which has signing authority over staking operations on the stake account. Signs the transaction.
	StakeAuthority string `protobuf:"bytes,3,opt,name=stake_authority,json=stakeAuthority,proto3" json:"stake_authority,omitempty"`
	// The parameters required to use a durable transaction nonce for Solana transactions.
	NonceOptions *NonceOptions `protobuf:"bytes,4,opt,name=nonce_options,json=nonceOptions,proto3" json:"nonce_options,omitempty"`
}

func (x *SolanaMergeStakeParameters) Reset() {
	*x = SolanaMergeStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaMergeStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaMergeStakeParameters) ProtoMessage() {}

func (x *SolanaMergeStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaMergeStakeParameters.ProtoReflect.Descriptor instead.
func (*SolanaMergeStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_solana_proto_rawDescGZIP(), []int{6}
}

func (x *SolanaMergeStakeParameters) GetStakeAccountAddress() string {
	if x != nil {
		return x.StakeAccountAddress
	}
	return ""
}

func (x *SolanaMergeStakeParameters) GetSourceStakeAccountAddress() string {
	if x != nil {
		return x.SourceStakeAccountAddress
	}
	return ""
}

func (x *SolanaMergeStakeParameters) GetStakeAuthority() string {
	if x != nil {
		return x.StakeAuthority
	}
	return ""
}

func (x *SolanaMergeStakeParameters) GetNonceOptions() *NonceOptions {
	if x != nil {
		return x.NonceOptions
	}
	return nil
}

// The parameters needed for staking on Solana
type SolanaStakingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//
	//	*SolanaStakingParameters_CreateStakeParameters
	//	*SolanaStakingParameters_DelegateStakeParameters
	//	*SolanaStakingParameters_DeactivateStakeParameters
	//	*SolanaStakingParameters_WithdrawStakeParameters
	//	*SolanaStakingParameters_SplitStakeParameters
	//	*SolanaStakingParameters_MergeStakeParameters
	Parameters isSolanaStakingParameters_Parameters `protobuf_oneof:"parameters"`
}

func (x *SolanaStakingParameters) Reset() {
	*x = SolanaStakingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakingParameters) ProtoMessage() {}

func (x *SolanaStakingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_solana_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakingParameters.ProtoReflect.Descriptor instead.
func (*SolanaStakingParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_solana_proto_rawDescGZIP(), []int{7}
}

func (m *SolanaStakingParameters) GetParameters() isSolanaStakingParameters_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *SolanaStakingParameters) GetCreateStakeParameters() *SolanaCreateStakeAccountParameters {
	if x, ok := x.GetParameters().(*SolanaStakingParameters_CreateStakeParameters); ok {
		return x.CreateStakeParameters
	}
	return nil
}

func (x *SolanaStakingParameters) GetDelegateStakeParameters() *SolanaDelegateStakeParameters {
	if x, ok := x.GetParameters().(*SolanaStakingParameters_DelegateStakeParameters); ok {
		return x.DelegateStakeParameters
	}
	return nil
}

func (x *SolanaStakingParameters) GetDeactivateStakeParameters() *SolanaDeactivateStakeParameters {
	if x, ok := x.GetParameters().(*SolanaStakingParameters_DeactivateStakeParameters); ok {
		return x.DeactivateStakeParameters
	}
	return nil
}

func (x *SolanaStakingParameters) GetWithdrawStakeParameters() *SolanaWithdrawStakeParameters {
	if x, ok := x.GetParameters().(*SolanaStakingParameters_WithdrawStakeParameters); ok {
		return x.WithdrawStakeParameters
	}
	return nil
}

func (x *SolanaStakingParameters) GetSplitStakeParameters() *SolanaSplitStakeParameters {
	if x, ok := x.GetParameters().(*SolanaStakingParameters_SplitStakeParameters); ok {
		return x.SplitStakeParameters
	}
	return nil
}

func (x *SolanaStakingParameters) GetMergeStakeParameters() *SolanaMergeStakeParameters {
	if x, ok := x.GetParameters().(*SolanaStakingParameters_MergeStakeParameters); ok {
		return x.MergeStakeParameters
	}
	return nil
}

type isSolanaStakingParameters_Parameters interface {
	isSolanaStakingParameters_Parameters()
}

type SolanaStakingParameters_CreateStakeParameters struct {
	// The parameters for create stake account action on Solana.
	CreateStakeParameters *SolanaCreateStakeAccountParameters `protobuf:"bytes,1,opt,name=create_stake_parameters,json=createStakeParameters,proto3,oneof"`
}

type SolanaStakingParameters_DelegateStakeParameters struct {
	// The parameters for delegate stake action on Solana.
	DelegateStakeParameters *SolanaDelegateStakeParameters `protobuf:"bytes,2,opt,name=delegate_stake_parameters,json=delegateStakeParameters,proto3,oneof"`
}

type SolanaStakingParameters_DeactivateStakeParameters struct {
	// The parameters for deactivate stake action on Solana.
	DeactivateStakeParameters *SolanaDeactivateStakeParameters `protobuf:"bytes,3,opt,name=deactivate_stake_parameters,json=deactivateStakeParameters,proto3,oneof"`
}

type SolanaStakingParameters_WithdrawStakeParameters struct {
	// The parameters for withdraw stake action on Solana.
	WithdrawStakeParameters *SolanaWithdrawStakeParameters `protobuf:"bytes,4,opt,name=withdraw_stake_parameters,json=withdrawStakeParameters,proto3,oneof"`
}

type SolanaStakingParameters_SplitStakeParameters struct {
	// The parameters for split stake action on Solana.
	SplitStakeParameters *SolanaSplitStakeParameters `protobuf:"bytes,5,opt,name=split_stake_parameters,json=splitStakeParameters,proto3,oneof"`
}

type SolanaStakingParameters_MergeStakeParameters struct {
	// The parameters for merge stake action on Solana.
	MergeStakeParameters *SolanaMergeStakeParameters `protobuf:"bytes,6,opt,name=merge_stake_parameters,json=mergeStakeParameters,proto3,oneof"`
}

func (*SolanaStakingParameters_CreateStakeParameters) isSolanaStakingParameters_Parameters() {}

func (*SolanaStakingParameters_DelegateStakeParameters) isSolanaStakingParameters_Parameters() {}

func (*SolanaStakingParameters_DeactivateStakeParameters) isSolanaStakingParameters_Parameters() {}

func (*SolanaStakingParameters_WithdrawStakeParameters) isSolanaStakingParameters_Parameters() {}

func (*SolanaStakingParameters_SplitStakeParameters) isSolanaStakingParameters_Parameters() {}

func (*SolanaStakingParameters_MergeStakeParameters) isSolanaStakingParameters_Parameters() {}

var File_coinbase_staking_v1alpha1_solana_proto protoreflect.FileDescriptor

var file_coinbase_staking_v1alpha1_solana_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x26, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a,
	0x0c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x3a, 0x1c, 0x92, 0x41, 0x19, 0x0a, 0x17, 0x2a, 0x15, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x3a, 0x20, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xaa, 0x03, 0x0a, 0x22, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x2e, 0x92, 0x41,
	0x2b, 0x0a, 0x29, 0x2a, 0x27, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xba, 0x02, 0x0a,
	0x1d, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x76, 0x6f, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0d,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x28, 0x92, 0x41, 0x25, 0x0a, 0x23, 0x2a, 0x21, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x1f, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0x2a, 0x23,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x1d, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x32, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x28, 0x92, 0x41, 0x25, 0x0a, 0x23, 0x2a, 0x21,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xfd, 0x02, 0x0a, 0x1a, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x19, 0x6e, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a,
	0x20, 0x2a, 0x1e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xc3, 0x02, 0x0a, 0x1a, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x1c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x19, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a,
	0x0d, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20, 0x2a, 0x1e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a,
	0x20, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8f, 0x06, 0x0a, 0x17, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x77, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x76, 0x0a, 0x19,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x7c, 0x0a, 0x1b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x76, 0x0a, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x17, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x16, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x14, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x16, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x21, 0x92, 0x41, 0x1e, 0x0a, 0x1c, 0x2a,
	0x1a, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_coinbase_staking_v1alpha1_solana_proto_rawDescOnce sync.Once
	file_coinbase_staking_v1alpha1_solana_proto_rawDescData = file_coinbase_staking_v1alpha1_solana_proto_rawDesc
)

func file_coinbase_staking_v1alpha1_solana_proto_rawDescGZIP() []byte {
	file_coinbase_staking_v1alpha1_solana_proto_rawDescOnce.Do(func() {
		file_coinbase_staking_v1alpha1_solana_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_staking_v1alpha1_solana_proto_rawDescData)
	})
	return file_coinbase_staking_v1alpha1_solana_proto_rawDescData
}

var file_coinbase_staking_v1alpha1_solana_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_coinbase_staking_v1alpha1_solana_proto_goTypes = []interface{}{
	(*NonceOptions)(nil),                       // 0: coinbase.staking.v1alpha1.NonceOptions
	(*SolanaCreateStakeAccountParameters)(nil), // 1: coinbase.staking.v1alpha1.SolanaCreateStakeAccountParameters
	(*SolanaDelegateStakeParameters)(nil),      // 2: coinbase.staking.v1alpha1.SolanaDelegateStakeParameters
	(*SolanaDeactivateStakeParameters)(nil),    // 3: coinbase.staking.v1alpha1.SolanaDeactivateStakeParameters
	(*SolanaWithdrawStakeParameters)(nil),      // 4: coinbase.staking.v1alpha1.SolanaWithdrawStakeParameters
	(*SolanaSplitStakeParameters)(nil),         // 5: coinbase.staking.v1alpha1.SolanaSplitStakeParameters
	(*SolanaMergeStakeParameters)(nil),         // 6: coinbase.staking.v1alpha1.SolanaMergeStakeParameters
	(*SolanaStakingParameters)(nil),            // 7: coinbase.staking.v1alpha1.SolanaStakingParameters
	(*Amount)(nil),                             // 8: coinbase.staking.v1alpha1.Amount
}
var file_coinbase_staking_v1alpha1_solana_proto_depIdxs = []int32{
	8,  // 0: coinbase.staking.v1alpha1.SolanaCreateStakeAccountParameters.amount:type_name -> coinbase.staking.v1alpha1.Amount
	0,  // 1: coinbase.staking.v1alpha1.SolanaCreateStakeAccountParameters.nonce_options:type_name -> coinbase.staking.v1alpha1.NonceOptions
	0,  // 2: coinbase.staking.v1alpha1.SolanaDelegateStakeParameters.nonce_options:type_name -> coinbase.staking.v1alpha1.NonceOptions
	0,  // 3: coinbase.staking.v1alpha1.SolanaDeactivateStakeParameters.nonce_options:type_name -> coinbase.staking.v1alpha1.NonceOptions
	8,  // 4: coinbase.staking.v1alpha1.SolanaWithdrawStakeParameters.amount:type_name -> coinbase.staking.v1alpha1.Amount
	0,  // 5: coinbase.staking.v1alpha1.SolanaWithdrawStakeParameters.nonce_options:type_name -> coinbase.staking.v1alpha1.NonceOptions
	8,  // 6: coinbase.staking.v1alpha1.SolanaSplitStakeParameters.amount:type_name -> coinbase.staking.v1alpha1.Amount
	0,  // 7: coinbase.staking.v1alpha1.SolanaSplitStakeParameters.nonce_options:type_name -> coinbase.staking.v1alpha1.NonceOptions
	0,  // 8: coinbase.staking.v1alpha1.SolanaMergeStakeParameters.nonce_options:type_name -> coinbase.staking.v1alpha1.NonceOptions
	1,  // 9: coinbase.staking.v1alpha1.SolanaStakingParameters.create_stake_parameters:type_name -> coinbase.staking.v1alpha1.SolanaCreateStakeAccountParameters
	2,  // 10: coinbase.staking.v1alpha1.SolanaStakingParameters.delegate_stake_parameters:type_name -> coinbase.staking.v1alpha1.SolanaDelegateStakeParameters
	3,  // 11: coinbase.staking.v1alpha1.SolanaStakingParameters.deactivate_stake_parameters:type_name -> coinbase.staking.v1alpha1.SolanaDeactivateStakeParameters
	4,  // 12: coinbase.staking.v1alpha1.SolanaStakingParameters.withdraw_stake_parameters:type_name -> coinbase.staking.v1alpha1.SolanaWithdrawStakeParameters
	5,  // 13: coinbase.staking.v1alpha1.SolanaStakingParameters.split_stake_parameters:type_name -> coinbase.staking.v1alpha1.SolanaSplitStakeParameters
	6,  // 14: coinbase.staking.v1alpha1.SolanaStakingParameters.merge_stake_parameters:type_name -> coinbase.staking.v1alpha1.SolanaMergeStakeParameters
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_coinbase_staking_v1alpha1_solana_proto_init() }
func file_coinbase_staking_v1alpha1_solana_proto_init() {
	if File_coinbase_staking_v1alpha1_solana_proto != nil {
		return
	}
	file_coinbase_staking_v1alpha1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_staking_v1alpha1_solana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_solana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaCreateStakeAccountParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_solana_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaDelegateStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_solana_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaDeactivateStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_solana_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaWithdrawStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_solana_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSplitStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_solana_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaMergeStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_solana_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_staking_v1alpha1_solana_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SolanaStakingParameters_CreateStakeParameters)(nil),
		(*SolanaStakingParameters_DelegateStakeParameters)(nil),
		(*SolanaStakingParameters_DeactivateStakeParameters)(nil),
		(*SolanaStakingParameters_WithdrawStakeParameters)(nil),
		(*SolanaStakingParameters_SplitStakeParameters)(nil),
		(*SolanaStakingParameters_MergeStakeParameters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_staking_v1alpha1_solana_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_staking_v1alpha1_solana_proto_goTypes,
		DependencyIndexes: file_coinbase_staking_v1alpha1_solana_proto_depIdxs,
		MessageInfos:      file_coinbase_staking_v1alpha1_solana_proto_msgTypes,
	}.Build()
	File_coinbase_staking_v1alpha1_solana_proto = out.File
	file_coinbase_staking_v1alpha1_solana_proto_rawDesc = nil
	file_coinbase_staking_v1alpha1_solana_proto_goTypes = nil
	file_coinbase_staking_v1alpha1_solana_proto_depIdxs = nil
}
