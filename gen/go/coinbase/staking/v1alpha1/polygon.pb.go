// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: coinbase/staking/v1alpha1/polygon.proto

package v1alpha1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The parameters required for stake action on Polygon
type PolygonStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public address of the delegator you wish to
	// interact with.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// The public address of the validator you wish to
	// perform the action to.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// The amount of the asset. For native assets or ERC-20 contracts, this is presented in terms of
	// atomic units (e.g., Wei for Ether) as a base-10 number.
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PolygonStakeParameters) Reset() {
	*x = PolygonStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonStakeParameters) ProtoMessage() {}

func (x *PolygonStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonStakeParameters.ProtoReflect.Descriptor instead.
func (*PolygonStakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_polygon_proto_rawDescGZIP(), []int{0}
}

func (x *PolygonStakeParameters) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

func (x *PolygonStakeParameters) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *PolygonStakeParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// (-- api-linter: core::0140::prepositions=disabled
//
//	aip.dev/not-precedent: We need to do this because it simplifies the api. --)
//
// The parameters required for unstake action on Polygon
type PolygonUnstakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public address of the delegator you wish to
	// interact with.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// The public address of the validator you wish to
	// perform the action to.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// The amount of the asset. For native assets or ERC-20 contracts, this is presented in terms of
	// atomic units (e.g., Wei for Ether) as a base-10 number.
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PolygonUnstakeParameters) Reset() {
	*x = PolygonUnstakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonUnstakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonUnstakeParameters) ProtoMessage() {}

func (x *PolygonUnstakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonUnstakeParameters.ProtoReflect.Descriptor instead.
func (*PolygonUnstakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_polygon_proto_rawDescGZIP(), []int{1}
}

func (x *PolygonUnstakeParameters) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

func (x *PolygonUnstakeParameters) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *PolygonUnstakeParameters) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// (-- api-linter: core::0140::prepositions=disabled
//
//	aip.dev/not-precedent: We need to do this because it simplifies the api. --)
//
// The parameters required for unstake action on Polygon
type PolygonRestakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public address of the delegator you wish to
	// interact with.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// The public address of the validator you wish to
	// perform the action to.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (x *PolygonRestakeParameters) Reset() {
	*x = PolygonRestakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonRestakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonRestakeParameters) ProtoMessage() {}

func (x *PolygonRestakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonRestakeParameters.ProtoReflect.Descriptor instead.
func (*PolygonRestakeParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_polygon_proto_rawDescGZIP(), []int{2}
}

func (x *PolygonRestakeParameters) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

func (x *PolygonRestakeParameters) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

// (-- api-linter: core::0140::prepositions=disabled
//
//	aip.dev/not-precedent: We need to do this because it simplifies the api. --)
//
// The parameters required for claim rewards action on Polygon
type PolygonClaimRewardsParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public address of the delegator you wish to
	// interact with.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// The public address of the validator you wish to
	// perform the action to.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (x *PolygonClaimRewardsParameters) Reset() {
	*x = PolygonClaimRewardsParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonClaimRewardsParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonClaimRewardsParameters) ProtoMessage() {}

func (x *PolygonClaimRewardsParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonClaimRewardsParameters.ProtoReflect.Descriptor instead.
func (*PolygonClaimRewardsParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_polygon_proto_rawDescGZIP(), []int{3}
}

func (x *PolygonClaimRewardsParameters) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

func (x *PolygonClaimRewardsParameters) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

// The parameters needed for staking on Polygon
type PolygonStakingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//
	//	*PolygonStakingParameters_StakeParameters
	//	*PolygonStakingParameters_UnstakeParameters
	//	*PolygonStakingParameters_RestakeParameters
	//	*PolygonStakingParameters_ClaimRewardsParameters
	Parameters isPolygonStakingParameters_Parameters `protobuf_oneof:"parameters"`
}

func (x *PolygonStakingParameters) Reset() {
	*x = PolygonStakingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonStakingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonStakingParameters) ProtoMessage() {}

func (x *PolygonStakingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonStakingParameters.ProtoReflect.Descriptor instead.
func (*PolygonStakingParameters) Descriptor() ([]byte, []int) {
	return file_coinbase_staking_v1alpha1_polygon_proto_rawDescGZIP(), []int{4}
}

func (m *PolygonStakingParameters) GetParameters() isPolygonStakingParameters_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *PolygonStakingParameters) GetStakeParameters() *PolygonStakeParameters {
	if x, ok := x.GetParameters().(*PolygonStakingParameters_StakeParameters); ok {
		return x.StakeParameters
	}
	return nil
}

func (x *PolygonStakingParameters) GetUnstakeParameters() *PolygonUnstakeParameters {
	if x, ok := x.GetParameters().(*PolygonStakingParameters_UnstakeParameters); ok {
		return x.UnstakeParameters
	}
	return nil
}

func (x *PolygonStakingParameters) GetRestakeParameters() *PolygonRestakeParameters {
	if x, ok := x.GetParameters().(*PolygonStakingParameters_RestakeParameters); ok {
		return x.RestakeParameters
	}
	return nil
}

func (x *PolygonStakingParameters) GetClaimRewardsParameters() *PolygonClaimRewardsParameters {
	if x, ok := x.GetParameters().(*PolygonStakingParameters_ClaimRewardsParameters); ok {
		return x.ClaimRewardsParameters
	}
	return nil
}

type isPolygonStakingParameters_Parameters interface {
	isPolygonStakingParameters_Parameters()
}

type PolygonStakingParameters_StakeParameters struct {
	// The parameters for stake action on Polygon
	StakeParameters *PolygonStakeParameters `protobuf:"bytes,1,opt,name=stake_parameters,json=stakeParameters,proto3,oneof"`
}

type PolygonStakingParameters_UnstakeParameters struct {
	// The parameters for unstake action on Polygon
	UnstakeParameters *PolygonUnstakeParameters `protobuf:"bytes,2,opt,name=unstake_parameters,json=unstakeParameters,proto3,oneof"`
}

type PolygonStakingParameters_RestakeParameters struct {
	// The parameters for restake action on Polygon
	RestakeParameters *PolygonRestakeParameters `protobuf:"bytes,3,opt,name=restake_parameters,json=restakeParameters,proto3,oneof"`
}

type PolygonStakingParameters_ClaimRewardsParameters struct {
	// The parameters for claim rewards action on Polygon
	ClaimRewardsParameters *PolygonClaimRewardsParameters `protobuf:"bytes,4,opt,name=claim_rewards_parameters,json=claimRewardsParameters,proto3,oneof"`
}

func (*PolygonStakingParameters_StakeParameters) isPolygonStakingParameters_Parameters() {}

func (*PolygonStakingParameters_UnstakeParameters) isPolygonStakingParameters_Parameters() {}

func (*PolygonStakingParameters_RestakeParameters) isPolygonStakingParameters_Parameters() {}

func (*PolygonStakingParameters_ClaimRewardsParameters) isPolygonStakingParameters_Parameters() {}

var File_coinbase_staking_v1alpha1_polygon_proto protoreflect.FileDescriptor

var file_coinbase_staking_v1alpha1_polygon_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x01,
	0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x31, 0x92, 0x41,
	0x2e, 0x0a, 0x2c, 0x2a, 0x2a, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x2e, 0x22,
	0xf3, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x11,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e, 0x2a, 0x2c, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x2e, 0x22, 0xb3, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e, 0x2a, 0x2c, 0x54,
	0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x20,
	0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x2e, 0x22, 0xbe, 0x01, 0x0a, 0x1d,
	0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x30, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x32, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x2e, 0x22, 0xca, 0x03, 0x0a,
	0x18, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x12, 0x75, 0x6e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x64, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x18, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_coinbase_staking_v1alpha1_polygon_proto_rawDescOnce sync.Once
	file_coinbase_staking_v1alpha1_polygon_proto_rawDescData = file_coinbase_staking_v1alpha1_polygon_proto_rawDesc
)

func file_coinbase_staking_v1alpha1_polygon_proto_rawDescGZIP() []byte {
	file_coinbase_staking_v1alpha1_polygon_proto_rawDescOnce.Do(func() {
		file_coinbase_staking_v1alpha1_polygon_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_staking_v1alpha1_polygon_proto_rawDescData)
	})
	return file_coinbase_staking_v1alpha1_polygon_proto_rawDescData
}

var file_coinbase_staking_v1alpha1_polygon_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_coinbase_staking_v1alpha1_polygon_proto_goTypes = []interface{}{
	(*PolygonStakeParameters)(nil),        // 0: coinbase.staking.v1alpha1.PolygonStakeParameters
	(*PolygonUnstakeParameters)(nil),      // 1: coinbase.staking.v1alpha1.PolygonUnstakeParameters
	(*PolygonRestakeParameters)(nil),      // 2: coinbase.staking.v1alpha1.PolygonRestakeParameters
	(*PolygonClaimRewardsParameters)(nil), // 3: coinbase.staking.v1alpha1.PolygonClaimRewardsParameters
	(*PolygonStakingParameters)(nil),      // 4: coinbase.staking.v1alpha1.PolygonStakingParameters
	(*Amount)(nil),                        // 5: coinbase.staking.v1alpha1.Amount
}
var file_coinbase_staking_v1alpha1_polygon_proto_depIdxs = []int32{
	5, // 0: coinbase.staking.v1alpha1.PolygonStakeParameters.amount:type_name -> coinbase.staking.v1alpha1.Amount
	5, // 1: coinbase.staking.v1alpha1.PolygonUnstakeParameters.amount:type_name -> coinbase.staking.v1alpha1.Amount
	0, // 2: coinbase.staking.v1alpha1.PolygonStakingParameters.stake_parameters:type_name -> coinbase.staking.v1alpha1.PolygonStakeParameters
	1, // 3: coinbase.staking.v1alpha1.PolygonStakingParameters.unstake_parameters:type_name -> coinbase.staking.v1alpha1.PolygonUnstakeParameters
	2, // 4: coinbase.staking.v1alpha1.PolygonStakingParameters.restake_parameters:type_name -> coinbase.staking.v1alpha1.PolygonRestakeParameters
	3, // 5: coinbase.staking.v1alpha1.PolygonStakingParameters.claim_rewards_parameters:type_name -> coinbase.staking.v1alpha1.PolygonClaimRewardsParameters
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_coinbase_staking_v1alpha1_polygon_proto_init() }
func file_coinbase_staking_v1alpha1_polygon_proto_init() {
	if File_coinbase_staking_v1alpha1_polygon_proto != nil {
		return
	}
	file_coinbase_staking_v1alpha1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonUnstakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonRestakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonClaimRewardsParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonStakingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_staking_v1alpha1_polygon_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PolygonStakingParameters_StakeParameters)(nil),
		(*PolygonStakingParameters_UnstakeParameters)(nil),
		(*PolygonStakingParameters_RestakeParameters)(nil),
		(*PolygonStakingParameters_ClaimRewardsParameters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_staking_v1alpha1_polygon_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_staking_v1alpha1_polygon_proto_goTypes,
		DependencyIndexes: file_coinbase_staking_v1alpha1_polygon_proto_depIdxs,
		MessageInfos:      file_coinbase_staking_v1alpha1_polygon_proto_msgTypes,
	}.Build()
	File_coinbase_staking_v1alpha1_polygon_proto = out.File
	file_coinbase_staking_v1alpha1_polygon_proto_rawDesc = nil
	file_coinbase_staking_v1alpha1_polygon_proto_goTypes = nil
	file_coinbase_staking_v1alpha1_polygon_proto_depIdxs = nil
}
