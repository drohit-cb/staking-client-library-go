// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: coinbase/staking/v1alpha1/api.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StakingService_ListProtocols_FullMethodName       = "/coinbase.staking.v1alpha1.StakingService/ListProtocols"
	StakingService_ListNetworks_FullMethodName        = "/coinbase.staking.v1alpha1.StakingService/ListNetworks"
	StakingService_ListValidators_FullMethodName      = "/coinbase.staking.v1alpha1.StakingService/ListValidators"
	StakingService_ListActions_FullMethodName         = "/coinbase.staking.v1alpha1.StakingService/ListActions"
	StakingService_CreateWorkflow_FullMethodName      = "/coinbase.staking.v1alpha1.StakingService/CreateWorkflow"
	StakingService_GetWorkflow_FullMethodName         = "/coinbase.staking.v1alpha1.StakingService/GetWorkflow"
	StakingService_ListWorkflows_FullMethodName       = "/coinbase.staking.v1alpha1.StakingService/ListWorkflows"
	StakingService_PerformWorkflowStep_FullMethodName = "/coinbase.staking.v1alpha1.StakingService/PerformWorkflowStep"
	StakingService_RefreshWorkflowStep_FullMethodName = "/coinbase.staking.v1alpha1.StakingService/RefreshWorkflowStep"
	StakingService_ViewStakingContext_FullMethodName  = "/coinbase.staking.v1alpha1.StakingService/ViewStakingContext"
)

// StakingServiceClient is the client API for StakingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StakingServiceClient interface {
	// List supported protocols
	ListProtocols(ctx context.Context, in *ListProtocolsRequest, opts ...grpc.CallOption) (*ListProtocolsResponse, error)
	// List supported staking networks for a given protocol
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	// List supported validators for a given protocol and network
	ListValidators(ctx context.Context, in *ListValidatorsRequest, opts ...grpc.CallOption) (*ListValidatorsResponse, error)
	// List supported actions for a given protocol and network
	ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error)
	// Create a workflow to perform an action
	CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error)
	// Get the current state of an active workflow
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error)
	// List all workflows in a project
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error)
	// (-- api-linter: core::0136::http-name-variable=disabled
	//
	//	aip.dev/not-precedent: We need to do this because
	//	the phrasing reads easier. --)
	//
	// Perform the next step in a workflow
	PerformWorkflowStep(ctx context.Context, in *PerformWorkflowStepRequest, opts ...grpc.CallOption) (*Workflow, error)
	// (-- api-linter: core::0136::http-name-variable=disabled
	//
	//	aip.dev/not-precedent: We need to do this because
	//	the phrasing reads easier. --)
	//
	// Refresh the current step in a workflow
	RefreshWorkflowStep(ctx context.Context, in *RefreshWorkflowStepRequest, opts ...grpc.CallOption) (*Workflow, error)
	// (-- api-linter: core::0136::http-name-variable=disabled
	//
	//	aip.dev/not-precedent: We need to do this because
	//	the phrasing reads easier. --)
	//
	// View Staking context information given a specific network address
	ViewStakingContext(ctx context.Context, in *ViewStakingContextRequest, opts ...grpc.CallOption) (*ViewStakingContextResponse, error)
}

type stakingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStakingServiceClient(cc grpc.ClientConnInterface) StakingServiceClient {
	return &stakingServiceClient{cc}
}

func (c *stakingServiceClient) ListProtocols(ctx context.Context, in *ListProtocolsRequest, opts ...grpc.CallOption) (*ListProtocolsResponse, error) {
	out := new(ListProtocolsResponse)
	err := c.cc.Invoke(ctx, StakingService_ListProtocols_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, StakingService_ListNetworks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) ListValidators(ctx context.Context, in *ListValidatorsRequest, opts ...grpc.CallOption) (*ListValidatorsResponse, error) {
	out := new(ListValidatorsResponse)
	err := c.cc.Invoke(ctx, StakingService_ListValidators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error) {
	out := new(ListActionsResponse)
	err := c.cc.Invoke(ctx, StakingService_ListActions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, StakingService_CreateWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, StakingService_GetWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error) {
	out := new(ListWorkflowsResponse)
	err := c.cc.Invoke(ctx, StakingService_ListWorkflows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) PerformWorkflowStep(ctx context.Context, in *PerformWorkflowStepRequest, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, StakingService_PerformWorkflowStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) RefreshWorkflowStep(ctx context.Context, in *RefreshWorkflowStepRequest, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, StakingService_RefreshWorkflowStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) ViewStakingContext(ctx context.Context, in *ViewStakingContextRequest, opts ...grpc.CallOption) (*ViewStakingContextResponse, error) {
	out := new(ViewStakingContextResponse)
	err := c.cc.Invoke(ctx, StakingService_ViewStakingContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StakingServiceServer is the server API for StakingService service.
// All implementations must embed UnimplementedStakingServiceServer
// for forward compatibility
type StakingServiceServer interface {
	// List supported protocols
	ListProtocols(context.Context, *ListProtocolsRequest) (*ListProtocolsResponse, error)
	// List supported staking networks for a given protocol
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	// List supported validators for a given protocol and network
	ListValidators(context.Context, *ListValidatorsRequest) (*ListValidatorsResponse, error)
	// List supported actions for a given protocol and network
	ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error)
	// Create a workflow to perform an action
	CreateWorkflow(context.Context, *CreateWorkflowRequest) (*Workflow, error)
	// Get the current state of an active workflow
	GetWorkflow(context.Context, *GetWorkflowRequest) (*Workflow, error)
	// List all workflows in a project
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error)
	// (-- api-linter: core::0136::http-name-variable=disabled
	//
	//	aip.dev/not-precedent: We need to do this because
	//	the phrasing reads easier. --)
	//
	// Perform the next step in a workflow
	PerformWorkflowStep(context.Context, *PerformWorkflowStepRequest) (*Workflow, error)
	// (-- api-linter: core::0136::http-name-variable=disabled
	//
	//	aip.dev/not-precedent: We need to do this because
	//	the phrasing reads easier. --)
	//
	// Refresh the current step in a workflow
	RefreshWorkflowStep(context.Context, *RefreshWorkflowStepRequest) (*Workflow, error)
	// (-- api-linter: core::0136::http-name-variable=disabled
	//
	//	aip.dev/not-precedent: We need to do this because
	//	the phrasing reads easier. --)
	//
	// View Staking context information given a specific network address
	ViewStakingContext(context.Context, *ViewStakingContextRequest) (*ViewStakingContextResponse, error)
	mustEmbedUnimplementedStakingServiceServer()
}

// UnimplementedStakingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStakingServiceServer struct {
}

func (UnimplementedStakingServiceServer) ListProtocols(context.Context, *ListProtocolsRequest) (*ListProtocolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProtocols not implemented")
}
func (UnimplementedStakingServiceServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedStakingServiceServer) ListValidators(context.Context, *ListValidatorsRequest) (*ListValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValidators not implemented")
}
func (UnimplementedStakingServiceServer) ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActions not implemented")
}
func (UnimplementedStakingServiceServer) CreateWorkflow(context.Context, *CreateWorkflowRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedStakingServiceServer) GetWorkflow(context.Context, *GetWorkflowRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedStakingServiceServer) ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedStakingServiceServer) PerformWorkflowStep(context.Context, *PerformWorkflowStepRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformWorkflowStep not implemented")
}
func (UnimplementedStakingServiceServer) RefreshWorkflowStep(context.Context, *RefreshWorkflowStepRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshWorkflowStep not implemented")
}
func (UnimplementedStakingServiceServer) ViewStakingContext(context.Context, *ViewStakingContextRequest) (*ViewStakingContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewStakingContext not implemented")
}
func (UnimplementedStakingServiceServer) mustEmbedUnimplementedStakingServiceServer() {}

// UnsafeStakingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StakingServiceServer will
// result in compilation errors.
type UnsafeStakingServiceServer interface {
	mustEmbedUnimplementedStakingServiceServer()
}

func RegisterStakingServiceServer(s grpc.ServiceRegistrar, srv StakingServiceServer) {
	s.RegisterService(&StakingService_ServiceDesc, srv)
}

func _StakingService_ListProtocols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProtocolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).ListProtocols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_ListProtocols_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).ListProtocols(ctx, req.(*ListProtocolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_ListValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).ListValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_ListValidators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).ListValidators(ctx, req.(*ListValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_ListActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).ListActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_ListActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).ListActions(ctx, req.(*ListActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).CreateWorkflow(ctx, req.(*CreateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_PerformWorkflowStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformWorkflowStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).PerformWorkflowStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_PerformWorkflowStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).PerformWorkflowStep(ctx, req.(*PerformWorkflowStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_RefreshWorkflowStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshWorkflowStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).RefreshWorkflowStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_RefreshWorkflowStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).RefreshWorkflowStep(ctx, req.(*RefreshWorkflowStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_ViewStakingContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewStakingContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).ViewStakingContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakingService_ViewStakingContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).ViewStakingContext(ctx, req.(*ViewStakingContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StakingService_ServiceDesc is the grpc.ServiceDesc for StakingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StakingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coinbase.staking.v1alpha1.StakingService",
	HandlerType: (*StakingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProtocols",
			Handler:    _StakingService_ListProtocols_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _StakingService_ListNetworks_Handler,
		},
		{
			MethodName: "ListValidators",
			Handler:    _StakingService_ListValidators_Handler,
		},
		{
			MethodName: "ListActions",
			Handler:    _StakingService_ListActions_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _StakingService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _StakingService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _StakingService_ListWorkflows_Handler,
		},
		{
			MethodName: "PerformWorkflowStep",
			Handler:    _StakingService_PerformWorkflowStep_Handler,
		},
		{
			MethodName: "RefreshWorkflowStep",
			Handler:    _StakingService_RefreshWorkflowStep_Handler,
		},
		{
			MethodName: "ViewStakingContext",
			Handler:    _StakingService_ViewStakingContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coinbase/staking/v1alpha1/api.proto",
}
