// Code generated by protoc-gen-go-aip. DO NOT EDIT.
//
// versions:
// 	protoc-gen-go-aip development
// 	protoc (unknown)
// source: coinbase/staking/rewards/v1/reward.proto

package v1

import (
	fmt "fmt"
	resourcename "go.einride.tech/aip/resourcename"
	strings "strings"
)

type RewardResourceName struct {
	Protocol string
	Reward   string
}

func (n ProtocolResourceName) RewardResourceName(
	reward string,
) RewardResourceName {
	return RewardResourceName{
		Protocol: n.Protocol,
		Reward:   reward,
	}
}

func (n RewardResourceName) Validate() error {
	if n.Protocol == "" {
		return fmt.Errorf("protocol: empty")
	}
	if strings.IndexByte(n.Protocol, '/') != -1 {
		return fmt.Errorf("protocol: contains illegal character '/'")
	}
	if n.Reward == "" {
		return fmt.Errorf("reward: empty")
	}
	if strings.IndexByte(n.Reward, '/') != -1 {
		return fmt.Errorf("reward: contains illegal character '/'")
	}
	return nil
}

func (n RewardResourceName) ContainsWildcard() bool {
	return false || n.Protocol == "-" || n.Reward == "-"
}

func (n RewardResourceName) String() string {
	return resourcename.Sprint(
		"protocols/{protocol}/rewards/{reward}",
		n.Protocol,
		n.Reward,
	)
}

func (n RewardResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *RewardResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"protocols/{protocol}/rewards/{reward}",
		&n.Protocol,
		&n.Reward,
	)
}

func (n RewardResourceName) ProtocolResourceName() ProtocolResourceName {
	return ProtocolResourceName{
		Protocol: n.Protocol,
	}
}
